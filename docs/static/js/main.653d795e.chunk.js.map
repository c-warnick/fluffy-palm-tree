{"version":3,"sources":["common/components/ZxingBarcodeScanner/index.tsx","common/utility/DBR/dbr.js","common/components/DynamsoftBarcodeScanner/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BarcodeScanner","style","width","height","mirrored","React","reader","setReader","videoInputDevices","setVideoInputDevices","selectedDeviceId","setSelectedDeviceId","controls","setControls","results","setResults","previewEl","requestUserMedia","a","BrowserCodeReader","listVideoInputDevices","vids","startScanning","decodeFromVideoDevice","current","id","result","console","log","getBarcodeFormat","getText","readerControls","stop","BrowserMultiFormatOneDReader","deviceId","videoStyle","transform","ref","onClick","type","value","readOnly","defaultProps","audio","forceScreenshotSourceSize","imageSmoothing","onUserMedia","onUserMediaError","screenshotFormat","screenshotQuality","DBR","engineResourcePath","BarcodeReader","productKeys","Scanner","appendMessage","setDestroyed","scanner","setScanner","elRef","configureScanner","createInstance","newScanner","msg","message","error","openScanner","appendChild","getUIElement","onFrameRead","barcodeFormatString","barcodeText","format","text","indexOf","exception","open","destroyScanner","destroy","libLoaded","setLibLoaded","resultValue","setResultValue","showScanner","setShowScanner","loasWASM","loadWasm","alert","className","App","useState","minHeight","ZxingBarcodeScanner","position","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAWMA,EAAiB,SAAC,GAKK,IAAD,IAJ1BC,aAI0B,MAJlB,GAIkB,EAH1BC,EAG0B,EAH1BA,MACAC,EAE0B,EAF1BA,OACAC,EAC0B,EAD1BA,SAEA,EAA4BC,aAA5B,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAkDF,aAAlD,mBAAOG,EAAP,KAA0BC,EAA1B,KACA,EAAgDJ,aAAhD,mBAAOK,EAAP,KAAyBC,EAAzB,KACA,EAAiCN,WAAwC,MAAzE,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAA8BR,WAAuB,IAArD,mBAAOS,EAAP,KAAgBC,EAAhB,KACMC,EAAYX,SAAsC,MAElDY,EAAgB,uCAAG,4BAAAC,EAAA,sEAEJC,oBAAkBC,wBAFd,OAEjBC,EAFiB,OAGvBZ,EAAqBY,GAHE,2CAAH,qDAMhBC,EAAa,uCAAG,8BAAAJ,EAAA,yDACjBJ,GACDC,EAAW,KAEVT,EAJiB,gCAKWA,EAAOiB,sBAAuBb,EAA9B,UAAgDM,EAAUQ,eAA1D,aAAgD,EAAmBC,IAAI,SAAEC,GACpGC,QAAQC,IAAK,mBAAoBF,GAC9BA,IACDX,GAAiB,OAANW,QAAM,IAANA,OAAA,EAAAA,EAAQG,oBAAqB,MAA7B,OAAoCH,QAApC,IAAoCA,OAApC,EAAoCA,EAAQI,YACvDC,EAAeC,WATD,OAKZD,EALY,OAalBlB,EAAYkB,GAbM,2CAAH,qDAiBnB1B,aAAgB,WAad,OAZIC,GACFC,EAAU,IAAI0B,gCAGZzB,GACFS,IAGCP,GACDY,IAGK,WACFV,GACDA,EAASoB,UAIZ,CAACtB,IAEJL,aAAgB,WACXG,GACDG,EAAoBH,EAAkB,GAAG0B,YAG1C,CAAC1B,IAOJ,IAAM2B,EAAa/B,EAAQ,2BAAQH,GAAR,IAAemC,UAAU,GAAD,OAAKnC,EAAMmC,WAAa,GAAxB,iBAA4CnC,EAC/F,OACE,sBAAKwB,GAAG,YAAR,UACI,uBACIA,GAAG,QACHY,IAAKrB,EACLf,MAAOkC,EACPjC,MAAOA,EACPC,OAAQA,IAEXW,GAAW,wBAAQwB,QAAShB,EAAjB,4BACZ,uBAAOiB,KAAK,OAAOC,MAAO1B,EAAS2B,UAAU,EAAMhB,GAAG,mBAK9DzB,EAAe0C,aAAe,CAC5BC,OAAO,EACPC,2BAA2B,EAC3BC,gBAAgB,EAChBzC,UAAU,EACV0C,YAAa,aACbC,iBAAkB,aAClBC,iBAAkB,aAClBC,kBAAmB,KAENjD,Q,0BCzGfkD,IAAIC,mBAAqB,wEACzBD,IAAIE,cAAcC,YAAc,oGAGjBH,QAAf,ECKMI,EAAU,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,cACjB,EAAkClD,YAAwB,GAA1D,mBAAkBmD,GAAlB,WACA,EAA8BnD,WAAoB,MAAlD,mBAAOoD,EAAP,KAAgBC,EAAhB,KACMC,EAAQtD,SAAkB,MAE1BuD,EAAgB,uCAAG,4BAAA1C,EAAA,kEAEhBuC,EAFgB,gCAGMP,EAAIlD,eAAe6D,iBAHzB,OAGbC,EAHa,OAInBJ,EAAWI,GAJQ,uDAOrBP,EAAc,CAAEQ,IAAK,KAAGC,QAASzB,KAAM,UACvCZ,QAAQsC,MAAR,MARqB,yDAAH,qDAYhBC,EAAW,uCAAG,sBAAAhD,EAAA,6DAClByC,EAAMnC,QAAQ2C,YAAYV,EAAQW,gBAClCX,EAAQY,YAAc,SAACvD,GAAkB,IAAD,gBACjBA,GADiB,IACtC,2BAA8B,CAAC,IAApBY,EAAmB,QAC5BC,QAAQC,IAAIF,EAAO4C,oBAAsB,KAAO5C,EAAO6C,aACvDhB,EAAc,CAAEiB,OAAQ9C,EAAO4C,oBAAqBG,KAAM/C,EAAO6C,YAAahC,KAAM,YACrB,IAA3Db,EAAO6C,YAAYG,QAAQ,4BAC7BnB,EAAc,CAAEQ,IAAKrC,EAAOiD,UAAUX,QAASzB,KAAM,WALnB,gCAFtB,SAWZkB,EAAQmB,OAXI,2CAAH,qDAcXC,EAAc,uCAAG,sBAAA3D,EAAA,yDACrBsC,GAAa,IACTC,EAFiB,gCAGbA,EAAQqB,UAHK,2CAAH,qDAsBpB,OAdAzE,aAAgB,WAGd,OAFAuD,IAEO,WACLiB,OAED,IAEHxE,aAAgB,WACVoD,GACFS,MAED,CAACT,IAEG,qBAAKpB,IAAKsB,KA8CJ3D,EA3CQ,WACrB,MAAkCK,YAAe,GAAjD,mBAAO0E,EAAP,KAAkBC,EAAlB,KACA,EAAsC3E,WAAe,IAArD,mBAAO4E,EAAP,KAAoBC,EAApB,KACA,EAAsC7E,YAAe,GAArD,mBAAO8E,EAAP,KAAoBC,EAApB,KAEMC,EAAQ,uCAAG,sBAAAnE,EAAA,+EAEPgC,EAAIlD,eAAesF,WAFZ,OAGbN,GAAa,GACbI,GAAe,GAJF,sDAMbG,MAAM,KAAGvB,SANI,8DAAH,qDA2Bd,OAJA3D,aAAgB,WACdgF,MACC,IAGD,sBAAKG,UAAU,aAAf,UACE,sBAAK/D,GAAG,YAAR,WACIsD,GAAc,sDACfI,GAAgB,cAAC,EAAD,CAAS5B,cApBV,SAACS,GACrB,OAAQA,EAAQzB,MACd,IAAK,SACH2C,EAAelB,EAAQQ,OAAS,KAAOR,EAAQS,MAC/C,MACF,IAAK,QACHS,EAAelB,EAAQD,YAgBzB,uBAAOxB,KAAK,OAAOC,MAAOyC,EAAaxC,UAAU,EAAMhB,GAAG,mBC9EjDgE,MAnBf,WACE,MAAsCC,oBAAkB,GAAxD,mBAAOP,EAAP,KAAoBC,EAApB,KAIA,OAEI,sBAAKI,UAAU,oBAAf,UACE,sBAAKvF,MAAO,CAAC0F,UAAW,SAAxB,WACIR,GAAe,cAACS,EAAD,CAAqB1F,MAAO,IAAKC,OAAQ,MACzDgF,GAAe,cAAC,EAAD,OAElB,qBAAKlF,MAAO,CAAC4F,SAAS,WAAYC,UAAW,UAA7C,SACE,wBAAQxD,QAXM,WACpB8C,GAAgBD,IAUV,iCCNKY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.653d795e.chunk.js","sourcesContent":["import * as React from \"react\";\nimport './BarcodeScanner.css';\nimport {BrowserMultiFormatOneDReader, BrowserCodeReader, IScannerControls} from '@zxing/browser';\n\nexport type BarcodeScannerProps = Omit<React.HTMLProps<HTMLVideoElement>, \"ref\"> & {\n  width?: number,\n  height?: number,\n  mirrored?: boolean,\n}\n\n\nconst BarcodeScanner = ({\n  style = {},\n  width,\n  height,\n  mirrored\n} : BarcodeScannerProps) => {\n  const [reader, setReader] = React.useState<BrowserMultiFormatOneDReader | null>();\n  const [videoInputDevices, setVideoInputDevices] = React.useState<MediaDeviceInfo[] | null>();\n  const [selectedDeviceId, setSelectedDeviceId] = React.useState<string | undefined>();\n  const [controls, setControls]  = React.useState<IScannerControls | null>(null);\n  const [results, setResults] = React.useState<string>(\"\");\n  const previewEl = React.useRef<HTMLVideoElement | null>(null);\n\n  const requestUserMedia = async () => {\n  \n    const vids = await BrowserCodeReader.listVideoInputDevices();\n    setVideoInputDevices(vids);\n  }\n\n  const startScanning = async () => {\n    if(results) {\n      setResults(\"\");\n    }\n    if(reader){\n      const readerControls = await reader.decodeFromVideoDevice( selectedDeviceId, previewEl.current?.id, ( result) => {\n        console.log( 'Scanning Results', result);\n        if(result){\n          setResults(result?.getBarcodeFormat() + \": \" + result?.getText());\n          readerControls.stop();\n        }\n      })\n\n      setControls(readerControls);\n    }\n  }\n\n  React.useEffect(() => {\n    if(!reader) {\n      setReader(new BrowserMultiFormatOneDReader());\n    }\n\n    if(!videoInputDevices) {\n      requestUserMedia();\n    }\n    \n    if(selectedDeviceId){\n      startScanning();\n    }\n\n    return () => {\n      if(controls) {\n        controls.stop();\n      }\n    }\n\n  }, [selectedDeviceId]);\n\n  React.useEffect(() => {\n    if(videoInputDevices){\n      setSelectedDeviceId(videoInputDevices[0].deviceId);\n    }\n    \n  }, [videoInputDevices]);\n\n  // React.useEffect(() => {\n  //   if(controls) {\n  //     setTimeout(() => stopAndAlert(), 20000);\n  //   }\n  // }, [controls]);\n  const videoStyle = mirrored ? { ...style, transform: `${style.transform || \"\"} scaleX(-1)` } : style;\n  return (\n    <div id='videoview'>\n        <video\n            id=\"video\"\n            ref={previewEl}\n            style={videoStyle}\n            width={width}\n            height={height}\n        />\n        {results && <button onClick={startScanning}>Start Scanning</button>}\n        <input type=\"text\" value={results} readOnly={true} id=\"resultText\" />\n      </div>\n    );\n}\n\nBarcodeScanner.defaultProps = {\n  audio: false,\n  forceScreenshotSourceSize: false,\n  imageSmoothing: true,\n  mirrored: false,\n  onUserMedia: () => undefined,\n  onUserMediaError: () => undefined,\n  screenshotFormat: \"image/webp\",\n  screenshotQuality: 0.92,\n};\nexport default BarcodeScanner;\n\n","import DBR from \"dynamsoft-javascript-barcode\";\nDBR.engineResourcePath = \"https://cdn.jsdelivr.net/npm/dynamsoft-javascript-barcode@8.8.3/dist/\";\nDBR.BarcodeReader.productKeys = \"t0068NQAAAD1L44opxTeO3G45x0qlWOJPRt+62ln5s7/qCVxF1VFHxS8PjDI4Mk4D7JTQ8EJiyifv1gvU7eDRc4NjGDvuBH8=\";\n// Make sure to set the key before you call any other APIs under Dynamsoft.DBR\n                        \nexport default DBR;","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\";\nimport \"./DynamsoftBarcodeScanner.css\";\nimport DBR from \"../../utility/DBR/dbr\";\n\nexport type BarcodeScannerProps = Omit<React.HTMLProps<HTMLVideoElement>, \"ref\"> & {\n  appendMessage: Function\n}\nconst Scanner = ({ appendMessage } : BarcodeScannerProps) => {\n  const [destroyed, setDestroyed] = React.useState<boolean>(false);\n  const [scanner, setScanner] = React.useState<any>(null);\n  const elRef = React.useRef<any>(null);\n\n  const configureScanner = async () => {\n    try {\n      if (!scanner) {\n        const newScanner = await DBR.BarcodeScanner.createInstance();\n        setScanner(newScanner);\n      }\n    } catch (ex: any) {\n      appendMessage({ msg: ex.message, type: \"error\" });\n      console.error(ex);\n    }\n  };\n\n  const openScanner = async () => {\n    elRef.current.appendChild(scanner.getUIElement());\n    scanner.onFrameRead = (results: any) => {\n      for (const result of results) {\n        console.log(result.barcodeFormatString + \": \" + result.barcodeText);\n        appendMessage({ format: result.barcodeFormatString, text: result.barcodeText, type: \"result\" });\n        if (result.barcodeText.indexOf(\"Attention(exceptionCode\") !== -1) {\n          appendMessage({ msg: result.exception.message, type: \"error\" });\n      }\n      }\n    }\n    await scanner.open();\n  };\n\n  const destroyScanner = async () => {\n    setDestroyed(true);\n    if (scanner) {\n      await scanner.destroy();\n    }\n  };\n\n  //Component mount useEffect\n  React.useEffect(() => {\n    configureScanner();\n\n    return () => {\n      destroyScanner();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (scanner) {\n      openScanner();\n    }\n  }, [scanner]);\n\n  return <div ref={elRef}></div>;\n};\n\nconst BarcodeScanner = () => {\n  const [libLoaded, setLibLoaded] = React.useState(false);\n  const [resultValue, setResultValue] = React.useState(\"\");\n  const [showScanner, setShowScanner] = React.useState(false);\n\n  const loasWASM = async () => {\n    try {\n      await DBR.BarcodeScanner.loadWasm();\n      setLibLoaded(true);\n      setShowScanner(true);\n    } catch (ex: any) {\n      alert(ex.message);\n      throw ex;\n    }\n  };\n\n  const appendMessage = (message: { type: any; format: string; text: string; msg: React.SetStateAction<string>; }) => {\n    switch (message.type) {\n      case \"result\":\n        setResultValue(message.format + \": \" + message.text);\n        break;\n      case \"error\":\n        setResultValue(message.msg);\n        break;\n      default: break;\n    }\n  }\n\n  React.useEffect(() => {\n    loasWASM();\n  }, []);\n\n  return (\n    <div className=\"helloWorld\">\n      <div id=\"UIElement\">\n        {!libLoaded && (<span>Loading Library...</span>)}\n        {showScanner && (<Scanner appendMessage={appendMessage}></Scanner>)}\n      </div>\n      <input type=\"text\" value={resultValue} readOnly={true} id=\"resultText\" />\n    </div>\n  );\n};\n\nexport default BarcodeScanner;\n","import { useState } from 'react'\n\nimport \"./App.css\";\nimport ZxingBarcodeScanner from \"./common/components/ZxingBarcodeScanner\";\nimport DynamsoftBarcodeScanner from \"./common/components/DynamsoftBarcodeScanner\";\n\n\nfunction App() {\n  const [showScanner, setShowScanner] = useState<boolean>(false);\n  const switchScanner = () => {\n    setShowScanner(!showScanner);\n  }\n  return (\n\n      <div className=\"container mx-auto\">\n        <div style={{minHeight: '200px'}}>\n          {!showScanner && <ZxingBarcodeScanner width={300} height={200} />}\n          {showScanner && <DynamsoftBarcodeScanner />}    \n        </div>\n        <div style={{position:'relative', textAlign: 'center'}}>\n          <button onClick={switchScanner}>Switch reader</button>\n        </div>   \n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}