{"version":3,"sources":["common/utility/DBR/dbr.js","common/components/DynamsoftBarcodeScanner/index.tsx","common/components/ZxingBarcodeScanner/index.tsx","common/components/QuaggaBarcodeScanner/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DBR","engineResourcePath","BarcodeReader","productKeys","Scanner","appendMessage","React","setDestroyed","scanner","setScanner","elRef","configureScanner","a","BarcodeScanner","createInstance","newScanner","msg","message","type","console","error","openScanner","current","appendChild","getUIElement","onFrameRead","results","result","log","barcodeFormatString","barcodeText","format","text","indexOf","exception","open","destroyScanner","destroy","ref","libLoaded","setLibLoaded","resultValue","setResultValue","showScanner","setShowScanner","loasWASM","loadWasm","alert","className","id","style","width","height","mirrored","reader","setReader","started","setStarted","videoInputDevices","setVideoInputDevices","currentDevice","setCurrentDevice","selectedDeviceId","setSelectedDeviceId","controls","setControls","setResults","previewEl","requestUserMedia","BrowserCodeReader","listVideoInputDevices","vids","startScanning","decodeFromVideoDevice","getBarcodeFormat","getText","readerControls","stop","switchCamera","newDeviceNumber","deviceNumber","length","BrowserMultiFormatOneDReader","deviceId","videoStyle","transform","onClick","value","readOnly","defaultProps","audio","forceScreenshotSourceSize","imageSmoothing","onUserMedia","onUserMediaError","screenshotFormat","screenshotQuality","onDetected","Quagga","init","config","err","start","onProcessed","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","boxes","clearRect","Number","getAttribute","filter","box","forEach","ImageDebug","drawPath","x","y","color","lineWidth","codeResult","code","line","detected","camera","setCamera","setResult","scanners","App","useState","minHeight","ZxingBarcodeScanner","QuaggaBarcodeScanner","map","item","index","marginRight","switchScanner","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.597adc16.chunk.js","sourcesContent":["import DBR from \"dynamsoft-javascript-barcode\";\nDBR.engineResourcePath = \"https://cdn.jsdelivr.net/npm/dynamsoft-javascript-barcode@8.8.3/dist/\";\nDBR.BarcodeReader.productKeys = \"t0068NQAAAD1L44opxTeO3G45x0qlWOJPRt+62ln5s7/qCVxF1VFHxS8PjDI4Mk4D7JTQ8EJiyifv1gvU7eDRc4NjGDvuBH8=\";\n// Make sure to set the key before you call any other APIs under Dynamsoft.DBR\n                        \nexport default DBR;","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from \"react\";\nimport \"./DynamsoftBarcodeScanner.css\";\nimport DBR from \"../../utility/DBR/dbr\";\n\nexport type BarcodeScannerProps = Omit<React.HTMLProps<HTMLVideoElement>, \"ref\"> & {\n  appendMessage: Function\n}\nconst Scanner = ({ appendMessage } : BarcodeScannerProps) => {\n  const [destroyed, setDestroyed] = React.useState<boolean>(false);\n  const [scanner, setScanner] = React.useState<any>(null);\n  const elRef = React.useRef<any>(null);\n\n  const configureScanner = async () => {\n    try {\n      if (!scanner) {\n        const newScanner = await DBR.BarcodeScanner.createInstance();\n        setScanner(newScanner);\n      }\n    } catch (ex: any) {\n      appendMessage({ msg: ex.message, type: \"error\" });\n      console.error(ex);\n    }\n  };\n\n  const openScanner = async () => {\n    elRef.current.appendChild(scanner.getUIElement());\n    scanner.onFrameRead = (results: any) => {\n      for (const result of results) {\n        console.log(result.barcodeFormatString + \": \" + result.barcodeText);\n        appendMessage({ format: result.barcodeFormatString, text: result.barcodeText, type: \"result\" });\n        if (result.barcodeText.indexOf(\"Attention(exceptionCode\") !== -1) {\n          appendMessage({ msg: result.exception.message, type: \"error\" });\n      }\n      }\n    }\n    await scanner.open();\n  };\n\n  const destroyScanner = async () => {\n    setDestroyed(true);\n    if (scanner) {\n      await scanner.destroy();\n    }\n  };\n\n  //Component mount useEffect\n  React.useEffect(() => {\n    configureScanner();\n\n    return () => {\n      destroyScanner();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (scanner) {\n      openScanner();\n    }\n  }, [scanner]);\n\n  return <div ref={elRef}></div>;\n};\n\nconst BarcodeScanner = () => {\n  const [libLoaded, setLibLoaded] = React.useState(false);\n  const [resultValue, setResultValue] = React.useState(\"\");\n  const [showScanner, setShowScanner] = React.useState(false);\n\n  const loasWASM = async () => {\n    try {\n      await DBR.BarcodeScanner.loadWasm();\n      setLibLoaded(true);\n      setShowScanner(true);\n    } catch (ex: any) {\n      alert(ex.message);\n      throw ex;\n    }\n  };\n\n  const appendMessage = (message: { type: any; format: string; text: string; msg: React.SetStateAction<string>; }) => {\n    switch (message.type) {\n      case \"result\":\n        setResultValue(message.format + \": \" + message.text);\n        break;\n      case \"error\":\n        setResultValue(message.msg);\n        break;\n      default: break;\n    }\n  }\n\n  React.useEffect(() => {\n    loasWASM();\n  }, []);\n\n  return (\n    <div className=\"helloWorld\">\n      <div className=\"control\">\n        {resultValue}\n      </div>\n      <div id=\"UIElement\">\n        {!libLoaded && (<span>Loading Library...</span>)}\n        {showScanner && (<Scanner appendMessage={appendMessage}></Scanner>)}\n      </div>\n      \n    </div>\n  );\n};\n\nexport default BarcodeScanner;\n","import * as React from \"react\";\nimport './BarcodeScanner.css';\nimport {BrowserMultiFormatOneDReader, BrowserCodeReader, IScannerControls} from '@zxing/browser';\n\nexport type BarcodeScannerProps = Omit<React.HTMLProps<HTMLVideoElement>, \"ref\"> & {\n  width?: number,\n  height?: number,\n  mirrored?: boolean,\n}\n\n\nconst BarcodeScanner = ({\n  style = {},\n  width,\n  height,\n  mirrored\n} : BarcodeScannerProps) => {\n  const [reader, setReader] = React.useState<BrowserMultiFormatOneDReader | null>();\n  const [started, setStarted] = React.useState<boolean | null>(false);\n  const [videoInputDevices, setVideoInputDevices] = React.useState<MediaDeviceInfo[] | null>();\n  const [currentDevice, setCurrentDevice] = React.useState<number>(0);\n  const [selectedDeviceId, setSelectedDeviceId] = React.useState<string | undefined>();\n  const [controls, setControls]  = React.useState<IScannerControls | null>(null);\n  const [results, setResults] = React.useState<string>(\"\");\n  const previewEl = React.useRef<HTMLVideoElement | null>(null);\n\n  const requestUserMedia = async () => {\n  \n    const vids = await BrowserCodeReader.listVideoInputDevices();\n    setVideoInputDevices(vids);\n  }\n\n  const startScanning = async () => {\n    if(results) {\n      setResults(\"\");\n    }\n    if(reader){\n      const readerControls = await reader.decodeFromVideoDevice( selectedDeviceId, previewEl.current?.id, ( result) => {\n        console.log( 'Scanning Results', result);\n        if(result){\n          setResults(result?.getBarcodeFormat() + \": \" + result?.getText());\n          readerControls.stop();\n        }\n      })\n      if(readerControls){\n        setStarted(true)\n        setControls(readerControls);\n      }\n    }\n  }\n\n  const switchCamera = async () => {\n    if(videoInputDevices) {\n      const deviceNumber = currentDevice || 0;\n      const newDeviceNumber = deviceNumber === videoInputDevices.length + 1 ? 0 : deviceNumber + 1\n      setCurrentDevice(newDeviceNumber);\n    }\n  }\n\n  React.useEffect(() => {\n    if(!reader) {\n      setReader(new BrowserMultiFormatOneDReader());\n    }\n\n    if(!videoInputDevices) {\n      requestUserMedia();\n    }\n    \n    if(selectedDeviceId){\n      startScanning();\n    }\n\n    return () => {\n      if(controls) {\n        controls.stop();\n      }\n    }\n\n  }, [selectedDeviceId]);\n\n  React.useEffect(() => {\n    if(videoInputDevices){\n      setSelectedDeviceId(videoInputDevices[0].deviceId);\n    }\n    \n  }, [videoInputDevices]);\n  \n  React.useEffect(() => {\n    if(controls && started && videoInputDevices) {\n      controls.stop();\n      setSelectedDeviceId(videoInputDevices[currentDevice].deviceId);\n    }\n    \n  }, [currentDevice]);\n\n  // React.useEffect(() => {\n  //   if(controls) {\n  //     setTimeout(() => stopAndAlert(), 20000);\n  //   }\n  // }, [controls]);\n  const videoStyle = mirrored ? { ...style, transform: `${style.transform || \"\"} scaleX(-1)` } : style;\n  return (\n    <div id='videoview'>\n      {!!(videoInputDevices && videoInputDevices?.length > 1) && <button onClick={switchCamera}>Switch Camera</button>}\n        <video\n            id=\"video\"\n            ref={previewEl}\n            style={videoStyle}\n            width={width}\n            height={height}\n        />\n        {results && <button onClick={startScanning}>Start Scanning</button>}\n        <input type=\"text\" value={results} readOnly={true} id=\"resultText\" />\n      </div>\n    );\n}\n\nBarcodeScanner.defaultProps = {\n  audio: false,\n  forceScreenshotSourceSize: false,\n  imageSmoothing: true,\n  mirrored: false,\n  onUserMedia: () => undefined,\n  onUserMediaError: () => undefined,\n  screenshotFormat: \"image/webp\",\n  screenshotQuality: 0.92,\n};\nexport default BarcodeScanner;\n\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable react/prop-types */\n//@ts-nocheck\nimport * as React from \"react\";\nimport config from \"./config.json\";\nimport './BarcodeScanner.css';\nimport Quagga from 'quagga';\n\nconst Scanner = ({ onDetected }) => {\n  React.useEffect(() => {\n    Quagga.init(config, err => {\n      if (err) {\n        console.log(err, \"error msg\");\n      }\n      Quagga.start();\n      return () => {\n        Quagga.stop()\n      }\n    });\n\n    //detecting boxes on stream\n    Quagga.onProcessed(result => {\n      const drawingCtx = Quagga.canvas.ctx.overlay,\n        drawingCanvas = Quagga.canvas.dom.overlay;\n\n      if (result) {\n        if (result.boxes) {\n          drawingCtx.clearRect(\n            0,\n            0,\n            Number(drawingCanvas.getAttribute(\"width\")),\n            Number(drawingCanvas.getAttribute(\"height\"))\n          );\n          result.boxes\n            .filter(function(box) {\n              return box !== result.box;\n            })\n            .forEach(function(box) {\n              Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, {\n                color: \"green\",\n                lineWidth: 2\n              });\n            });\n        }\n\n        if (result.box) {\n          Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, {\n            color: \"#00F\",\n            lineWidth: 2\n          });\n        }\n\n        if (result.codeResult && result.codeResult.code) {\n          Quagga.ImageDebug.drawPath(\n            result.line,\n            { x: \"x\", y: \"y\" },\n            drawingCtx,\n            { color: \"red\", lineWidth: 3 }\n          );\n        }\n      }\n    });\n\n    Quagga.onDetected(detected);\n  }, []);\n\n  const detected = (result: { codeResult: { code: unknown; }; }) => {\n    onDetected(result.codeResult.code);\n  };\n\n  return (\n    // If you do not specify a target,\n    // QuaggaJS would look for an element that matches\n    // the CSS selector #interactive.viewport\n    <div id=\"interactive\" className=\"viewport\" />\n  );\n};\n\nconst BarcodeScanner = () => {\n  const [camera, setCamera] = React.useState(false);\n  const [result, setResult] = React.useState(null);\n\n  const onDetected = result => {\n    setResult(result);\n  };\n\n  const stopCamera = () => {\n    setCamera(!camera);\n    setResult(null);\n  }\n\n  return (\n    <>\n      <div className=\"control\">\n        <p>{result ? result : \"Scanning...\"}</p>\n        <button onClick={stopCamera}>\n          {camera ? \"Stop\" : \"Start\"}\n        </button>\n      </div>\n      <div className=\"barcodescanner\">\n        {camera && <Scanner onDetected={onDetected} />}\n      </div>\n    </>\n  );\n}\n\nexport default BarcodeScanner;\n\n","import { useState } from 'react'\n\nimport \"./App.css\";\nimport {ZxingBarcodeScanner,  DynamsoftBarcodeScanner, QuaggaBarcodeScanner  } from './common/components';\nconst scanners = [  'zxing', 'dynamsoft', 'quagga'];\n\nfunction App() {\n  const [showScanner, setShowScanner] = useState<string>(scanners[0]);\n  const switchScanner = (index: number) => {\n    setShowScanner(scanners[index]);\n  }\n  return (\n\n      <div className=\"container mx-auto\">\n        <div style={{minHeight: '200px'}}>\n          {showScanner === scanners[0] && <ZxingBarcodeScanner width={300} height={200} />}\n          {showScanner === scanners[1] && <DynamsoftBarcodeScanner />}  \n          {showScanner === scanners[2] && <QuaggaBarcodeScanner />}   \n        </div>\n        <div className=\"control bottom\">\n          {scanners.map((item,index) => {\n            return (<button style={{marginRight: '15px'}} key={item + index} onClick={() => switchScanner(index)}>Switch to {item}</button>)\n          })}\n        </div>   \n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}